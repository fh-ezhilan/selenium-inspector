{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nconst apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;\n\nexport const ai = genkit({\n  plugins: [googleAI({ apiKey })],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc,IAAI,QAAQ,GAAG,CAAC,cAAc;AAEhE,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAAE;QAAO;KAAG;IAC/B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/src/ai/flows/suggest-locator.ts"],"sourcesContent":["// src/ai/flows/suggest-locator.ts\n'use server';\n/**\n * @fileOverview A flow that suggests the best locator for a given element on a webpage.\n *\n * - suggestLocator - A function that suggests the best locator for a given element.\n * - SuggestLocatorInput - The input type for the suggestLocator function.\n * - SuggestLocatorOutput - The return type for the suggestLocator function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestLocatorInputSchema = z.object({\n  html: z.string().describe('The HTML of the element to find a locator for.'),\n  pageSource: z.string().describe('The full HTML source code of the page.'),\n  url: z.string().url().describe('The URL of the page.'),\n});\nexport type SuggestLocatorInput = z.infer<typeof SuggestLocatorInputSchema>;\n\nconst SuggestLocatorOutputSchema = z.object({\n  locator: z.string().describe('The suggested locator for the element.'),\n  locatorType: z.enum(['xpath', 'css', 'id']).describe('The type of the suggested locator.'),\n  confidence: z.number().min(0).max(1).describe('The confidence score for the suggested locator.'),\n  explanation: z.string().describe('An explanation of why the suggested locator was chosen.'),\n});\nexport type SuggestLocatorOutput = z.infer<typeof SuggestLocatorOutputSchema>;\n\nexport async function suggestLocator(input: SuggestLocatorInput): Promise<SuggestLocatorOutput> {\n  return suggestLocatorFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'suggestLocatorPrompt',\n  input: {schema: SuggestLocatorInputSchema},\n  output: {schema: SuggestLocatorOutputSchema},\n  prompt: `You are an AI expert in suggesting the best locator for a given element on a webpage.\n\nYou are given the HTML of the element, the full HTML source code of the page, and the URL of the page.\n\nYou should suggest the best locator (XPath, CSS, or ID) for the element, and explain why you chose that locator.\n\nBe sure to include a confidence score for your suggestion.\n\nElement HTML: {{{html}}}\nPage Source: {{{pageSource}}}\nURL: {{{url}}}`,\n});\n\nconst suggestLocatorFlow = ai.defineFlow(\n  {\n    name: 'suggestLocatorFlow',\n    inputSchema: SuggestLocatorInputSchema,\n    outputSchema: SuggestLocatorOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;;;AAElC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,aAAa,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAS;QAAO;KAAK,EAAE,QAAQ,CAAC;IACrD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;IAC9C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;;;;;;;;cAUG,CAAC;AACf;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/src/ai/flows/generate-methods.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow that generates Selenium test methods in Java.\n *\n * - generateMethods - A function that generates Java methods based on a description.\n * - GenerateMethodsInput - The input type for the generateMethods function.\n * - GenerateMethodsOutput - The return type for the generateMethods function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nfunction toCamelCase(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) =>\n      index === 0 ? word.toLowerCase() : word.toUpperCase()\n    )\n    .replace(/\\s+/g, \"\");\n}\n\nconst LocatorSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  type: z.enum([\"id\", \"name\", \"className\", \"tagName\", \"linkText\", \"partialLinkText\", \"css\", \"xpath\"]),\n  value: z.string(),\n});\n\nconst GenerateMethodsInputSchema = z.object({\n  pageName: z.string().describe(\"The name of the page object class.\"),\n  locators: z.array(LocatorSchema).describe(\"A list of available locators on the page.\"),\n  description: z.string().describe(\"A natural language description of the test case or user interaction.\"),\n});\nexport type GenerateMethodsInput = z.infer<typeof GenerateMethodsInputSchema>;\n\nconst GenerateMethodsOutputSchema = z.object({\n  methods: z.string().describe(\"The generated Java methods as a single string. Each method should be well-documented.\"),\n});\nexport type GenerateMethodsOutput = z.infer<typeof GenerateMethodsOutputSchema>;\n\nexport async function generateMethods(input: GenerateMethodsInput): Promise<GenerateMethodsOutput> {\n  return generateMethodsFlow(input);\n}\n\nconst PromptInputSchema = z.object({\n  pageName: z.string(),\n  locators: z.array(z.object({\n    name: z.string(),\n    camelCaseName: z.string(),\n    type: z.string(),\n    value: z.string()\n  })),\n  description: z.string(),\n});\n\nconst prompt = ai.definePrompt({\n  name: 'generateMethodsPrompt',\n  input: {schema: PromptInputSchema},\n  output: {schema: GenerateMethodsOutputSchema},\n  prompt: `You are an expert Selenium test automation engineer who writes clean, maintainable Java code.\nYour task is to generate Java methods for a Page Object class based on a natural language description.\n\nYou will be given the Page Object class name, a list of available locators, and a description of the desired user interaction.\n\nRules:\n1.  Generate one or more public void Java methods that perform the actions described.\n2.  Use the provided locators. The locators are defined as static 'By' variables in the class. You must refer to them by their camelCased variable names.\n3.  Assume a 'WebDriver driver' instance is available in the class scope. You should also assume the driver has been initialized.\n4.  Each generated method should have a Javadoc comment explaining what it does.\n5.  Do not include the class definition or the locator definitions in your output. Only generate the methods.\n6.  If the description implies interacting with input fields, generate methods that accept string parameters (e.g., 'public void enterUsername(String username)').\n7.  The generated code should be only the method(s), without any surrounding markdown or explanations.\n\nHere is the context for the page object:\nPage Object Class Name: {{{pageName}}}Page\n\nAvailable Locators (use the camelCaseName for variable names):\n{{#each locators}}\n- Name: \"{{this.name}}\", camelCaseName: \"{{this.camelCaseName}}\", Type: {{this.type}}, Value: \"{{this.value}}\"\n{{/each}}\n\nUser Interaction Description:\n\"{{{description}}}\"\n\nNow, generate the Java methods based on the description.\n`,\n});\n\nconst generateMethodsFlow = ai.defineFlow(\n  {\n    name: 'generateMethodsFlow',\n    inputSchema: GenerateMethodsInputSchema,\n    outputSchema: GenerateMethodsOutputSchema,\n  },\n  async (input) => {\n    const processedLocators = input.locators.map(locator => ({\n        ...locator,\n        camelCaseName: toCamelCase(locator.name)\n    }));\n\n    const promptInput = {\n      pageName: input.pageName,\n      locators: processedLocators,\n      description: input.description,\n    };\n    \n    const {output} = await prompt(promptInput);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,SAAS,YAAY,GAAW;IAC9B,OAAO,IACJ,OAAO,CAAC,uBAAuB,CAAC,MAAM,QACrC,UAAU,IAAI,KAAK,WAAW,KAAK,KAAK,WAAW,IAEpD,OAAO,CAAC,QAAQ;AACrB;AAEA,MAAM,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;IACd,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAM;QAAQ;QAAa;QAAW;QAAY;QAAmB;QAAO;KAAQ;IAClG,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM;AACjB;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ,CAAC;IAC1C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM;IAClB,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACzB,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QACd,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM;QACvB,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QACd,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB;IACA,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM;AACvB;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiB;IACjC,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,oBAAoB,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAA,UAAW,CAAC;YACrD,GAAG,OAAO;YACV,eAAe,YAAY,QAAQ,IAAI;QAC3C,CAAC;IAED,MAAM,cAAc;QAClB,UAAU,MAAM,QAAQ;QACxB,UAAU;QACV,aAAa,MAAM,WAAW;IAChC;IAEA,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/src/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { suggestLocator, SuggestLocatorInput, SuggestLocatorOutput } from \"@/ai/flows/suggest-locator\";\nimport { generateMethods, GenerateMethodsInput, GenerateMethodsOutput } from \"@/ai/flows/generate-methods\";\nimport { z } from \"zod\";\n\nconst suggestLocatorActionSchema = z.object({\n  html: z.string(),\n  pageSource: z.string(),\n  url: z.string().url(),\n});\n\nexport async function suggestLocatorAction(input: SuggestLocatorInput): Promise<{\n    data?: SuggestLocatorOutput;\n    error?: string;\n}> {\n  const parsed = suggestLocatorActionSchema.safeParse(input);\n  if (!parsed.success) {\n    return { error: \"Invalid input.\" };\n  }\n\n  try {\n    const output = await suggestLocator(parsed.data);\n    return { data: output };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n    return { error: `AI suggestion failed: ${errorMessage}` };\n  }\n}\n\nconst locatorActionSchema = z.object({\n    id: z.string(),\n    name: z.string(),\n    type: z.enum([\"id\", \"name\", \"className\", \"tagName\", \"linkText\", \"partialLinkText\", \"css\", \"xpath\"]),\n    value: z.string(),\n});\n  \nconst generateMethodsActionSchema = z.object({\n    pageName: z.string(),\n    locators: z.array(locatorActionSchema),\n    description: z.string(),\n});\n\nexport async function generateMethodsAction(input: GenerateMethodsInput): Promise<{\n    data?: GenerateMethodsOutput;\n    error?: string;\n}> {\n  const parsed = generateMethodsActionSchema.safeParse(input);\n  if (!parsed.success) {\n    return { error: `Invalid input: ${parsed.error.message}` };\n  }\n\n  try {\n    const output = await generateMethods(parsed.data);\n    return { data: output };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n    return { error: `AI method generation failed: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;;;;;;;AAEA,MAAM,6BAA6B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IACd,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM;IACpB,KAAK,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;AACrB;AAEO,eAAe,qBAAqB,KAA0B;IAInE,MAAM,SAAS,2BAA2B,SAAS,CAAC;IACpD,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO;YAAE,OAAO;QAAiB;IACnC;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE,OAAO,IAAI;QAC/C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,aAAa,QAAQ,EAAE,OAAO,GAAG;QACtD,OAAO;YAAE,OAAO,CAAC,sBAAsB,EAAE,cAAc;QAAC;IAC1D;AACF;AAEA,MAAM,sBAAsB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IACd,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAM;QAAQ;QAAa;QAAW;QAAY;QAAmB;QAAO;KAAQ;IAClG,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEA,MAAM,8BAA8B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM;IAClB,UAAU,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;IAClB,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;AACzB;AAEO,eAAe,sBAAsB,KAA2B;IAIrE,MAAM,SAAS,4BAA4B,SAAS,CAAC;IACrD,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO;YAAE,OAAO,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC,OAAO,EAAE;QAAC;IAC3D;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,IAAI;QAChD,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,aAAa,QAAQ,EAAE,OAAO,GAAG;QACtD,OAAO;YAAE,OAAO,CAAC,6BAA6B,EAAE,cAAc;QAAC;IACjE;AACF;;;IAjDsB;IAgCA;;AAhCA,+OAAA;AAgCA,+OAAA","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/.next-internal/server/app/pages/%5BpageId%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateMethodsAction as '40bf010b636f05c08fa46c95367edee36b687fba95'} from 'ACTIONS_MODULE0'\nexport {suggestLocatorAction as '40e20856156404cb7fd42949799899d286e3ae64d8'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/src/app/pages/%5BpageId%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/pages/[pageId]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/pages/[pageId]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":["file:///Users/ezhilanb/selenium-inspector/src/app/pages/%5BpageId%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/pages/[pageId]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/pages/[pageId]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 612, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}